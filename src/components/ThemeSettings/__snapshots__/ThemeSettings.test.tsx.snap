// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ThemeSettings /> getEditor when label has HTML entities (encoded characters) should decode the label 1`] = `
<WithTheme(SelectBox)
  label="<Here> & \\"There's\\" © ®"
  onChange={[Function]}
  options={Array []}
  selected=""
  testId="select.test-labels"
/>
`;

exports[`<ThemeSettings /> getEditor when type equals checkbox should return with the correct type 1`] = `
<CheckboxInput
  checked={false}
  label="Hide links to web pages"
  onChange={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "setting": Object {
              "id": "hide_content",
              "label": "Hide links on webpage",
              "type": "checkbox",
            },
            "value": false,
          },
        ],
        Array [
          Object {
            "setting": Object {
              "id": "color-textHeading",
              "label": "Headings text color",
              "type": "color",
            },
            "value": "#FF123",
          },
        ],
      ],
    }
  }
  testId="checkbox.testing-checkbox"
/>
`;

exports[`<ThemeSettings /> getEditor when type equals color should return with the correct type 1`] = `
<Connect(ColorSetting)
  color="#FFFFF"
  label="Button text color"
  name="testing-color-picker"
  onChange={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "setting": Object {
              "id": "hide_content",
              "label": "Hide links on webpage",
              "type": "checkbox",
            },
            "value": false,
          },
        ],
        Array [
          Object {
            "setting": Object {
              "id": "color-textHeading",
              "label": "Headings text color",
              "type": "color",
            },
            "value": "#FF123",
          },
        ],
      ],
    }
  }
  testId="color.testing-color-picker"
/>
`;

exports[`<ThemeSettings /> getEditor when type equals font should return with the correct type 1`] = `
<WithTheme(SelectBox)
  label="Logo Font Family"
  onChange={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "setting": Object {
              "id": "hide_content",
              "label": "Hide links on webpage",
              "type": "checkbox",
            },
            "value": false,
          },
        ],
        Array [
          Object {
            "setting": Object {
              "id": "color-textHeading",
              "label": "Headings text color",
              "type": "color",
            },
            "value": "#FF123",
          },
        ],
      ],
    }
  }
  options={Array []}
  selected={false}
  testId="font.testing-font"
/>
`;

exports[`<ThemeSettings /> getEditor when type equals heading should return correct type 1`] = `
<styled.div>
  HELLO
</styled.div>
`;

exports[`<ThemeSettings /> getEditor when type equals imageDimension should return the correct type 1`] = `
<ImageSize
  label="Background image"
  onChange={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "setting": Object {
              "id": "hide_content",
              "label": "Hide links on webpage",
              "type": "checkbox",
            },
            "value": false,
          },
        ],
        Array [
          Object {
            "setting": Object {
              "id": "color-textHeading",
              "label": "Headings text color",
              "type": "color",
            },
            "value": "#FF123",
          },
        ],
      ],
    }
  }
  options={Array []}
  selected="20x20"
  testId="imageDimension.test-imageDimension"
/>
`;

exports[`<ThemeSettings /> getEditor when type equals optimizedCheckout-image should return the correct type 1`] = `
<CheckoutImageUpload
  imageURL="hello_there"
  label="Upload image"
  name="test-imageUpload"
  onChange={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "setting": Object {
              "id": "hide_content",
              "label": "Hide links on webpage",
              "type": "checkbox",
            },
            "value": false,
          },
        ],
        Array [
          Object {
            "setting": Object {
              "id": "color-textHeading",
              "label": "Headings text color",
              "type": "color",
            },
            "value": "#FF123",
          },
        ],
      ],
    }
  }
  testId="optimizedCheckout-image.test-imageUpload"
/>
`;

exports[`<ThemeSettings /> getEditor when type equals select should return correct type 1`] = `
<WithTheme(SelectBox)
  label="Logo type"
  onChange={[Function]}
  options={Array []}
  selected="integer:1"
  testId="select.test-select"
/>
`;

exports[`<ThemeSettings /> getEditor when type equals text should return correct type 1`] = `
<InputField
  label=""
  onBlur={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "setting": Object {
              "id": "hide_content",
              "label": "Hide links on webpage",
              "type": "checkbox",
            },
            "value": false,
          },
        ],
        Array [
          Object {
            "setting": Object {
              "id": "color-textHeading",
              "label": "Headings text color",
              "type": "color",
            },
            "value": "#FF123",
          },
        ],
      ],
    }
  }
  onChange={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "setting": Object {
              "id": "hide_content",
              "label": "Hide links on webpage",
              "type": "checkbox",
            },
            "value": false,
          },
        ],
        Array [
          Object {
            "setting": Object {
              "id": "color-textHeading",
              "label": "Headings text color",
              "type": "color",
            },
            "value": "#FF123",
          },
        ],
      ],
    }
  }
  testId="text.test-text"
  value="kermit_the_frog"
/>
`;

exports[`<ThemeSettings /> render() renders the component 1`] = `
<Draggable
  position={
    Object {
      "x": 5,
      "y": 10,
    }
  }
>
  <ExpandableMenu
    title="Typography & Icons"
  >
    <styled.ul>
      <styled.li
        key="0"
      >
        <styled.div>
          Logo
        </styled.div>
      </styled.li>
      <styled.li
        key="1"
      >
        <WithTheme(SelectBox)
          label="Font family"
          onChange={[Function]}
          options={
            Array [
              Object {
                "label": "Oswald",
                "value": "Google_Oswald_400",
              },
              Object {
                "label": "Oswald Light",
                "value": "Google_Oswald_300",
              },
            ]
          }
          testId="font.logo-font"
        />
      </styled.li>
      <styled.li
        key="2"
      >
        <styled.div>
          Headings
        </styled.div>
      </styled.li>
      <styled.li
        key="3"
      >
        <Connect(ColorSetting)
          label="Headings text color"
          name="color-textHeading"
          onChange={[MockFunction]}
          testId="color.color-textHeading"
        />
      </styled.li>
      <styled.li
        key="4"
      >
        <ImageSize
          label="Logo size"
          onChange={[Function]}
          options={
            Array [
              Object {
                "label": "Original (as uploaded)",
                "value": "original",
              },
              Object {
                "label": "Optimized for theme",
                "value": "250x100",
              },
              Object {
                "label": "Specify dimensions",
                "value": "custom",
              },
            ]
          }
          testId="imageDimension.logo_size"
        />
      </styled.li>
      <styled.li
        key="5"
      >
        <WithTheme(SelectBox)
          label="Logo position"
          onChange={[Function]}
          options={
            Array [
              Object {
                "label": "Right",
                "value": "right",
              },
              Object {
                "label": "Center",
                "value": "center",
              },
              Object {
                "label": "Left",
                "value": "left",
              },
            ]
          }
          selected=""
          testId="select.logo-position"
        />
      </styled.li>
      <styled.li
        key="6"
      >
        <CheckboxInput
          label="Show Powered By"
          onChange={[Function]}
          testId="checkbox.show_powered_by"
        />
      </styled.li>
      <styled.li
        key="7"
      >
        <InputField
          label="Product sale price label"
          onBlur={[Function]}
          onChange={[Function]}
          testId="text.pdp-sale-price-label"
        />
      </styled.li>
    </styled.ul>
  </ExpandableMenu>
</Draggable>
`;
